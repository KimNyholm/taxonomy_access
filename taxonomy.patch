Index: modules/taxonomy.module
===================================================================
RCS file: /cvs/drupal/drupal/modules/taxonomy.module,v
retrieving revision 1.192.2.6
diff -u -r1.192.2.6 taxonomy.module
--- modules/taxonomy.module	19 Jul 2005 21:31:03 -0000	1.192.2.6
+++ modules/taxonomy.module	8 Nov 2005 22:01:58 -0000
@@ -1,5 +1,6 @@
 <?php
 // $Id$
+// patch based on http://drupal.org/node/25998 "problem editing node with only update access"
 
 /**
  * @file
@@ -377,7 +378,7 @@
 /**
  * Generate a form element for selecting terms from a vocabulary.
  */
-function taxonomy_form($vid, $value = 0, $help = NULL, $name = 'taxonomy') {
+function taxonomy_form($vid, $value = 0, $help = NULL, $name = 'taxonomy', $op = 'create') {
   $vocabulary = taxonomy_get_vocabulary($vid);
   $help = ($help) ? $help : $vocabulary->help;
   if ($vocabulary->required) {
@@ -387,7 +388,7 @@
     $blank = '<'. t('none') .'>';
   }
 
-  return _taxonomy_term_select(check_plain($vocabulary->name), $name, $value, $vid, $help, intval($vocabulary->multiple), $blank);
+  return _taxonomy_term_select(check_plain($vocabulary->name), $name, $value, $vid, $help, intval($vocabulary->multiple), $blank, array(), $op);
 }
 
 /**
@@ -439,9 +440,17 @@
  * Generate a form for selecting terms to associate with a node.
  */
 function taxonomy_node_form($type, $node = '', $help = NULL, $name = 'taxonomy') {
+  $op = 'create';
   if (!$node->taxonomy) {
     if ($node->nid) {
-      $terms = array_keys(taxonomy_node_get_terms($node->nid));
+      if (function_exists('taxonomy_access')) {
+      	// if nid exists, we are updating the node
+        $op = 'update';
+        $terms = array_keys(taxonomy_node_get_terms($node->nid, 'tid', $op));
+      }
+      else {
+        $terms = array_keys(taxonomy_node_get_terms($node->nid));
+      }
     }
     else {
       $terms = 0;
@@ -453,7 +462,7 @@
 
   $c = db_query("SELECT v.*, n.type FROM {vocabulary} v INNER JOIN {vocabulary_node_types} n ON v.vid = n.vid WHERE n.type = '%s' ORDER BY v.weight, v.name", $type);
   while ($vocabulary = db_fetch_object($c)) {
-    $result[] = taxonomy_form($vocabulary->vid, $terms, $help, $name);
+    $result[] = taxonomy_form($vocabulary->vid, $terms, $help, $name, $op);
   }
   return $result ? $result : array();
 }
@@ -461,11 +470,18 @@
 /**
  * Find all terms associated to the given node, within one vocabulary.
  */
-function taxonomy_node_get_terms_by_vocabulary($nid, $vid, $key = 'tid') {
+function taxonomy_node_get_terms_by_vocabulary($nid, $vid, $key = 'tid', $access = 'view') {
   $result = db_query('SELECT t.* FROM {term_data} t, {term_node} r WHERE t.tid = r.tid AND t.vid = %d AND r.nid = %d ORDER BY weight', $vid, $nid);
   $terms = array();
   while ($term = db_fetch_object($result)) {
-    $terms[$term->$key] = $term;
+    if (function_exists('taxonomy_access')) {
+      if (taxonomy_access($access, $term->tid)) {
+        $terms[$term->$key] = $term;
+      }
+    } 
+    else {
+      $terms[$term->$key] = $term;
+    }
   }
   return $terms;
 }
@@ -473,14 +489,21 @@
 /**
  * Find all terms associated to the given node.
  */
-function taxonomy_node_get_terms($nid, $key = 'tid') {
+function taxonomy_node_get_terms($nid, $key = 'tid', $access = 'view') {
   static $terms;
 
   if (!isset($terms[$nid])) {
     $result = db_query('SELECT t.* FROM {term_data} t, {term_node} r WHERE r.tid = t.tid AND r.nid = %d ORDER BY weight, name', $nid);
     $terms[$nid] = array();
     while ($term = db_fetch_object($result)) {
-      $terms[$nid][$term->$key] = $term;
+      if (function_exists('taxonomy_access')) {
+        if (taxonomy_access($access, $term->tid)) {
+          $terms[$nid][$term->$key] = $term;
+	}
+      } 
+      else {
+        $terms[$nid][$term->$key] = $term;
+      }
     }
   }
   return $terms[$nid];
@@ -489,7 +512,7 @@
 /**
  * Save term associations for a given node.
  */
-function taxonomy_node_save($nid, $terms) {
+function taxonomy_node_save($nid, $terms, $op = 'create') {
   taxonomy_node_delete($nid);
 
   if (is_array($terms)) {
@@ -502,7 +525,14 @@
         }
       }
       else if ($term) {
-        db_query('INSERT INTO {term_node} (nid, tid) VALUES (%d, %d)', $nid, $term);
+        if (function_exists('taxonomy_access')) {
+	  if (taxonomy_access($op, $term)) {
+            db_query('INSERT INTO {term_node} (nid, tid) VALUES (%d, %d)', $nid, $term);
+	  }
+	}
+	else {
+          db_query('INSERT INTO {term_node} (nid, tid) VALUES (%d, %d)', $nid, $term);
+	}
       }
     }
   }
@@ -523,7 +553,14 @@
     $result = db_query('SELECT t.*, tid1, tid2 FROM {term_relation}, {term_data} t WHERE (t.tid = tid1 OR t.tid = tid2) AND (tid1 = %d OR tid2 = %d) AND t.tid != %d ORDER BY weight, name', $tid, $tid, $tid);
     $related = array();
     while ($term = db_fetch_object($result)) {
-      $related[$term->$key] = $term;
+        if (function_exists('taxonomy_access')) {
+           if (taxonomy_access('view', $term->tid)) {
+             $related[$term->$key] = $term;
+	   }
+        } 
+	else {
+	  $related[$term->$key] = $term;
+	}
     }
     return $related;
   }
@@ -540,7 +577,14 @@
     $result = db_query('SELECT t.* FROM {term_hierarchy} h, {term_data} t WHERE h.parent = t.tid AND h.tid = %d ORDER BY weight, name', $tid);
     $parents = array();
     while ($parent = db_fetch_object($result)) {
-      $parents[$parent->$key] = $parent;
+        if (function_exists('taxonomy_access')) {
+          if (taxonomy_access('view', $parent->tid)) {
+            $parents[$parent->$key] = $parent;
+	  }
+        } 
+	else {
+	  $parents[$parent->$key] = $parent;
+	}
     }
     return $parents;
   }
@@ -577,7 +621,14 @@
   }
   $children = array();
   while ($term = db_fetch_object($result)) {
-    $children[$term->$key] = $term;
+    if (function_exists('taxonomy_access')) {
+      if (taxonomy_access('view', $term->tid)) {
+        $children[$term->$key] = $term;
+      }
+    } 
+    else {
+      $children[$term->$key] = $term;
+    }
   }
   return $children;
 }
@@ -602,24 +653,44 @@
  *   An array of all term objects in the tree. Each term object is extended
  *   to have "depth" and "parents" attributes in addition to its normal ones.
  */
-function taxonomy_get_tree($vid, $parent = 0, $depth = -1, $max_depth = NULL) {
+function taxonomy_get_tree($vid, $parent = 0, $depth = -1, $max_depth = NULL, $access = 'view') {
   static $children, $parents, $terms;
 
   $depth++;
 
   // We cache trees, so it's not CPU-intensive to call get_tree() on a term
   // and its children, too.
+  // pyromanfo: Cache based on user role and access
+  if (function_exists('taxonomy_access')) {
+    global $user;
+    if (isset($uid)) {
+      $user_object = user_load(array('uid' => $uid));
+    } 
+    else {
+      $user_object = $user;
+    }
+    $real_vid = $vid;
+    if (isset($user) && is_array($user->roles)) {
+      $vid = $vid.implode("','", array_keys($user_object->roles)).$access;
+    } 
+    else {
+      $vid = $vid.'1'.$access;
+    }
+  } 
+  else {
+    $real_vid = $vid;
+  }
+
   if (!isset($children[$vid])) {
     $children[$vid] = array();
 
-    $result = db_query('SELECT t.*, parent FROM {term_data} t, {term_hierarchy} h WHERE t.tid = h.tid AND t.vid = %d ORDER BY weight, name', $vid);
+    $result = db_query('SELECT t.*, parent FROM {term_data} t, {term_hierarchy} h WHERE t.tid = h.tid AND t.vid = %d ORDER BY weight, name', $real_vid);
     while ($term = db_fetch_object($result)) {
       $children[$vid][$term->parent][] = $term->tid;
       $parents[$vid][$term->tid][] = $term->parent;
       $terms[$vid][$term->tid] = $term;
     }
   }
-
   $max_depth = (is_null($max_depth)) ? count($children[$vid]) : $max_depth;
   if ($children[$vid][$parent]) {
     foreach ($children[$vid][$parent] as $child) {
@@ -631,12 +702,23 @@
         $tree[] = $terms[$vid][$child];
 
         if ($children[$vid][$child]) {
-          $tree = array_merge($tree, taxonomy_get_tree($vid, $child, $depth, $max_depth));
+          $tree = array_merge($tree, taxonomy_get_tree($real_vid, $child, $depth, $max_depth, $access));
         }
       }
     }
   }
 
+   // strip out entries where the user doesn't have proper access
+   if (function_exists('taxonomy_access') && is_array($tree)) {
+     $newtree = array();
+     foreach ($tree as $term) {
+       if (taxonomy_access($access, $term->tid)) {
+         $newtree[] = $term;
+       }
+     }
+     $tree = $newtree;
+   }
+
   return $tree ? $tree : array();
 }
 
@@ -697,7 +779,14 @@
   if (!isset($children)) {
     $result = db_query('SELECT tid, parent FROM {term_hierarchy}');
     while ($term = db_fetch_object($result)) {
-      $children[$term->parent][] = $term->tid;
+      if (function_exists('taxonomy_access')) {
+         if (taxonomy_access('view', $term->tid)) {
+           $children[$term->parent][] = $term->tid;
+	 }
+      } 
+      else {
+        $children[$term->parent][] = $term->tid;
+      }
     }
   }
   return $children[$tid] ? $children[$tid] : array();
@@ -719,7 +808,14 @@
   $db_result = db_query("SELECT * FROM {term_data} WHERE LOWER('%s') LIKE LOWER(name)", trim($name));
   $result = array();
   while ($term = db_fetch_object($db_result)) {
-    $result[] = $term;
+    if (function_exists('taxonomy_access')) {
+      if (taxonomy_access('view', $term->tid)) {
+         $result[] = $term;
+      }
+    } 
+    else {
+      $result[] = $term;
+    }
   }
 
   return $result;
@@ -745,12 +841,17 @@
  * Return the term object matching a term ID.
  */
 function taxonomy_get_term($tid) {
+  if (function_exists('taxonomy_access')) {
+    if (!taxonomy_access('view', $tid)) {
+      return FALSE;
+    }
+  }
   // simple cache using a static var?
   return db_fetch_object(db_query('SELECT * FROM {term_data} WHERE tid = %d', $tid));
 }
 
-function _taxonomy_term_select($title, $name, $value, $vocabulary_id, $description, $multiple, $blank, $exclude = array()) {
-  $tree = taxonomy_get_tree($vocabulary_id);
+function _taxonomy_term_select($title, $name, $value, $vocabulary_id, $description, $multiple, $blank, $exclude = array(), $access = 'view') {
+  $tree = taxonomy_get_tree($vocabulary_id,0,-1,NULL,$access);
   $options = array();
 
   if ($blank) {
@@ -885,10 +986,10 @@
 function taxonomy_nodeapi($node, $op, $arg = 0) {
   switch ($op) {
     case 'insert':
-      taxonomy_node_save($node->nid, $node->taxonomy);
+      taxonomy_node_save($node->nid, $node->taxonomy, 'create');
       break;
     case 'update':
-      taxonomy_node_save($node->nid, $node->taxonomy);
+      taxonomy_node_save($node->nid, $node->taxonomy, 'update');
       break;
     case 'delete':
       taxonomy_node_delete($node->nid);
@@ -919,6 +1020,22 @@
   // Needed for '+' to show up in RSS discovery URLs
   $rss_tids = urlencode($str_tids);
 
+  if (function_exists('taxonomy_access')) {
+    $access_tids = array();
+    foreach($tids as $tid) {
+      if (taxonomy_access('view', $tid)) {
+        $access_tids[] = $tid;
+      }
+    }
+    if ($access_tids) {
+      $tids = $access_tids;
+    } 
+    else {
+      drupal_access_denied();
+      return;
+    }
+  }
+
   if ($tids) {
     // Build title:
     $result = db_query('SELECT name FROM {term_data} WHERE tid IN (%s)', implode(',', $tids));
